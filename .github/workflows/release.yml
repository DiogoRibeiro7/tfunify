name: Release

on:
  push:
    branches: [ main ]           # run tests on pushes to main
    tags: [ "v*.*.*" ]           # full release only on version tags
  workflow_dispatch: {}          # allow manual run

permissions:
  contents: write

jobs:
  verify-branch:
    name: Verify release tag is on main
    if: startsWith(github.ref, 'refs/tags/')   # only for tag events
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag ancestry and recency (no tag fetch)
        run: |
          set -euo pipefail
          # Fetch only branch heads; avoid tags to prevent clobber errors
          git fetch --prune --no-tags origin +refs/heads/*:refs/remotes/origin/*

          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"
          echo "GITHUB_SHA=$GITHUB_SHA"

          # The commit the tag points to
          TAG_COMMIT="$GITHUB_SHA"
          echo "Tag commit: $TAG_COMMIT"

          # Ensure the tag commit is contained in main
          if git merge-base --is-ancestor "$TAG_COMMIT" origin/main; then
            echo "✅ Tag commit is contained in main"
          else
            echo "❌ Error: Tag commit is not on main"
            exit 1
          fi

          # Warn if tag isn't the tip of main
          MAIN_COMMIT="$(git rev-parse origin/main)"
          echo "Main commit: $MAIN_COMMIT"
          if [ "$TAG_COMMIT" = "$MAIN_COMMIT" ]; then
            echo "✅ Tag points to the latest main commit"
          else
            echo "⚠️  Warning: Tag does not point to the latest main commit"
          fi

  test:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Configure Poetry + Install
        run: |
          set -euo pipefail
          poetry config virtualenvs.prefer-active-python true
          poetry env use "$(python -c 'import sys; print(sys.executable)')"
          poetry install --with dev --no-interaction --no-ansi

      - name: Lint
        run: |
          poetry run ruff check .
          poetry run ruff format --check .

      - name: Type check
        run: poetry run mypy tfunify

      - name: Unit tests
        run: poetry run pytest --cov=tfunify --cov-report=term-missing --cov-fail-under=80

  test-cli:
    name: Test CLI functionality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Configure Poetry + Install
        run: |
          set -euo pipefail
          poetry config virtualenvs.prefer-active-python true
          poetry env use "$(python -c 'import sys; print(sys.executable)')"
          poetry install --no-interaction --no-ansi

      - name: Create test data (NumPy inside Poetry venv)
        run: |
          poetry run python - <<'PY'
          import numpy as np, csv
          np.random.seed(42)
          n = 200
          prices = 100 + np.cumsum(0.01 * np.random.randn(n))
          with open('test_data.csv', 'w', newline='') as f:
              w = csv.writer(f)
              w.writerow(['date', 'close'])
              for i, p in enumerate(prices):
                  w.writerow([f'2023-{(i%12)+1:02d}-{(i%28)+1:02d}', f'{p:.2f}'])
          PY

      - name: Run CLI commands
        run: |
          poetry run tfu european --csv test_data.csv --span-long 50 --span-short 10
          poetry run tfu american --csv test_data.csv --span-long 50 --span-short 10 --atr-period 20
          poetry run tfu tsmom --csv test_data.csv --L 5 --M 8

      - name: Validate artifacts
        run: |
          poetry run python - <<'PY'
          import numpy as np, sys
          ok = True
          for system in ['european', 'american', 'tsmom']:
              try:
                  data = np.load(f'{system}_results.npz')
                  print(f'{system}: keys={list(data.keys())}')
                  assert len(data.files) > 0
              except Exception as e:
                  ok = False
                  print(f'Validation failed for {system}: {e}', file=sys.stderr)
          if not ok:
            raise SystemExit(1)
          print('All CLI tests passed!')
          PY

  build-publish:
    name: Build and publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')   # only for tag events
    runs-on: ubuntu-latest
    needs: [verify-branch, test, test-cli]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Verify version tag matches pyproject
        run: |
          set -euo pipefail
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          echo "Tag version: $TAG_VERSION"
          poetry config virtualenvs.prefer-active-python true
          poetry env use "$(python -c 'import sys; print(sys.executable)')"
          PYPROJECT_VERSION="$(poetry version -s)"
          echo "pyproject version: $PYPROJECT_VERSION"
          if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Error: Tag ($TAG_VERSION) != pyproject ($PYPROJECT_VERSION)"
            exit 1
          fi
          echo "Version verification passed."

      - name: Build package
        run: |
          set -euo pipefail
          poetry install --no-root --no-interaction --no-ansi
          poetry build
          ls -la dist/

      - name: Verify wheel contents
        run: |
          python - <<'PY'
          import zipfile, os
          wheels = [f for f in os.listdir('dist') if f.endswith('.whl')]
          if not wheels:
            raise SystemExit('No wheel file found')
          wheel = os.path.join('dist', wheels[0])
          with zipfile.ZipFile(wheel, 'r') as z:
            files = z.namelist()
            print('Wheel contents:')
            for f in sorted(files): print(' ', f)
            if not any(f.startswith('tfunify/') and f.endswith('.py') for f in files):
              raise SystemExit('No tfunify Python files found in wheel')
          PY

      - name: Test installation from wheel
        run: |
          set -euo pipefail
          python -m venv test_env
          source test_env/bin/activate
          pip install --upgrade pip
          pip install dist/*.whl
          python - <<'PY'
          import tfunify, numpy as np
          from tfunify.european import EuropeanTF, EuropeanTFConfig
          print(f'tfunify version: {tfunify.__version__}')
          np.random.seed(42)
          prices = 100 * np.cumprod(1 + 0.01 * np.random.randn(100))
          pnl, *_ = EuropeanTF(EuropeanTFConfig(span_long=20, span_short=5)).run_from_prices(prices)
          print(f'Test run successful, PnL shape: {pnl.shape}')
          PY
          deactivate

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --username __token__ --password "$POETRY_PYPI_TOKEN_PYPI"

      - name: Compute release version (strip leading v)
        id: version
        run: echo "value=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release
            See [CHANGELOG.md](CHANGELOG.md) for details.

            ## Installation
            ```bash
            pip install tfunify==${{ steps.version.outputs.value }}
            ```

            ## Verification
            - Python 3.10, 3.11, 3.12
            - Unit + CLI tests passed
          draft: false
          prerelease: false
