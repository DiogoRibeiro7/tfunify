name: Release (manual, workflow creates the tag)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.1.2). Leave empty to use pyproject version."
        required: false
        type: string

permissions:
  contents: write   # needed to push tags and create the GitHub Release

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  prep:
    name: Prepare release (resolve version & target commit)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tag: ${{ steps.meta.outputs.tag }}
      sha: ${{ steps.meta.outputs.sha }}
    steps:
      - name: Checkout main (read-only)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python 3.11 (for tomllib)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Determine version and target commit
        id: meta
        run: |
          set -euo pipefail

          # Resolve the version to release
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            python - <<'PY'
            import sys, tomllib
            with open("pyproject.toml","rb") as f:
                data = tomllib.load(f)
            v = data["tool"]["poetry"]["version"]
            print(v)
            PY
            VERSION="$(python - <<'PY'
import tomllib, sys
print(tomllib.load(open("pyproject.toml","rb"))["tool"]["poetry"]["version"])
PY
)"
          fi

          # Sanity check: simple semver (major.minor.patch)
          case "$VERSION" in
            [0-9]*.[0-9]*.[0-9]*) : ;;
            *) echo "Invalid version '$VERSION'. Use e.g. 0.1.2 or provide 'version' input."; exit 1 ;;
          esac

          # Record the main tip SHA now; all jobs will use this exact commit
          SHA="$(git rev-parse HEAD)"

          TAG="v${VERSION}"

          echo "Resolved version: $VERSION"
          echo "Tag to create   : $TAG"
          echo "Target commit   : $SHA"

          # Fail early if the tag already exists on the remote
          if git ls-remote --tags origin "refs/tags/$TAG" | grep -q "$TAG"; then
            echo "Remote tag $TAG already exists. Choose a new version or delete the tag first."
            exit 1
          fi

          {
            echo "version=$VERSION"
            echo "tag=$TAG"
            echo "sha=$SHA"
          } >> "$GITHUB_OUTPUT"

  test:
    name: Test suite (matrix)
    runs-on: ubuntu-latest
    needs: prep
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout exact release commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prep.outputs.sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Install (dev)
        run: |
          set -euo pipefail
          poetry config virtualenvs.prefer-active-python true
          poetry env use "$(python -c 'import sys; print(sys.executable)')"
          poetry install --with dev --no-interaction --no-ansi

      - name: Lint
        run: |
          poetry run ruff check .
          poetry run ruff format --check .

      - name: Type check
        run: poetry run mypy tfunify

      - name: Unit tests
        run: poetry run pytest --cov=tfunify --cov-report=term-missing --cov-fail-under=80

  test-cli:
    name: Test CLI functionality
    runs-on: ubuntu-latest
    needs: prep
    steps:
      - name: Checkout exact release commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prep.outputs.sha }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Install
        run: |
          set -euo pipefail
          poetry config virtualenvs.prefer-active-python true
          poetry env use "$(python -c 'import sys; print(sys.executable)')"
          poetry install --no-interaction --no-ansi

      - name: Create test data (NumPy inside Poetry venv)
        run: |
          poetry run python - <<'PY'
          import numpy as np, csv
          np.random.seed(42)
          n = 200
          prices = 100 + np.cumsum(0.01 * np.random.randn(n))
          with open('test_data.csv', 'w', newline='') as f:
              w = csv.writer(f)
              w.writerow(['date', 'close'])
              for i, p in enumerate(prices):
                  w.writerow([f'2023-{(i%12)+1:02d}-{(i%28)+1:02d}', f'{p:.2f}'])
          PY

      - name: Run CLI commands
        run: |
          poetry run tfu european --csv test_data.csv --span-long 50 --span-short 10
          poetry run tfu american --csv test_data.csv --span-long 50 --span-short 10 --atr-period 20
          poetry run tfu tsmom --csv test_data.csv --L 5 --M 8

      - name: Validate artifacts
        run: |
          poetry run python - <<'PY'
          import numpy as np, sys
          ok = True
          for system in ['european', 'american', 'tsmom']:
              try:
                  data = np.load(f'{system}_results.npz')
                  print(f'{system}: keys={list(data.keys())}')
                  assert len(data.files) > 0
              except Exception as e:
                  ok = False
                  print(f'Validation failed for {system}: {e}', file=sys.stderr)
          if not ok:
              raise SystemExit(1)
          print('All CLI tests passed!')
          PY

  tag:
    name: Create and push tag
    runs-on: ubuntu-latest
    needs: [prep, test, test-cli]
    steps:
      - name: Checkout exact release commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prep.outputs.sha }}
          fetch-depth: 0
          persist-credentials: true   # required to push tags with GITHUB_TOKEN

      - name: Configure git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag ${{ needs.prep.outputs.tag }}
        run: |
          set -euo pipefail
          TAG="${{ needs.prep.outputs.tag }}"
          SHA="${{ needs.prep.outputs.sha }}"
          # Double-check tag doesn't exist remotely
          if git ls-remote --tags origin "refs/tags/$TAG" | grep -q "$TAG"; then
            echo "Remote tag $TAG already exists. Aborting."
            exit 1
          fi
          # Create annotated tag at the exact SHA captured in prep
          git tag -a "$TAG" -m "Release $TAG" "$SHA"
          git push origin "refs/tags/$TAG"

  build-publish:
    name: Build, publish to PyPI, and create GitHub Release
    runs-on: ubuntu-latest
    needs: [prep, tag]
    steps:
      - name: Checkout exact release commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prep.outputs.sha }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Verify pyproject version matches ${{ needs.prep.outputs.version }}
        run: |
          set -euo pipefail
          PYPROJECT_VERSION="$(python - <<'PY'
          import tomllib
          print(tomllib.load(open("pyproject.toml","rb"))["tool"]["poetry"]["version"])
          PY
          )"
          if [ "$PYPROJECT_VERSION" != "${{ needs.prep.outputs.version }}" ]; then
            echo "pyproject version ($PYPROJECT_VERSION) != planned release (${{ needs.prep.outputs.version }})"
            exit 1
          fi
          echo "Version verification passed."

      - name: Build package
        run: |
          set -euo pipefail
          poetry install --no-root --no-interaction --no-ansi
          poetry build
          ls -la dist/

      - name: Smoke test wheel install
        run: |
          set -euo pipefail
          python -m venv test_env
          source test_env/bin/activate
          pip install --upgrade pip
          pip install dist/*.whl
          python - <<'PY'
          import tfunify, numpy as np
          from tfunify.european import EuropeanTF, EuropeanTFConfig
          print(f'tfunify version: {tfunify.__version__}')
          np.random.seed(42)
          prices = 100 * np.cumprod(1 + 0.01 * np.random.randn(100))
          pnl, *_ = EuropeanTF(EuropeanTFConfig(span_long=20, span_short=5)).run_from_prices(prices)
          print(f'Test run successful, PnL shape: {pnl.shape}')
          PY
          deactivate

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --username __token__ --password "$POETRY_PYPI_TOKEN_PYPI"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prep.outputs.tag }}
          release_name: Release ${{ needs.prep.outputs.tag }}
          body: |
            ## Changes in this release

            See [CHANGELOG.md](CHANGELOG.md).

            ## Installation
            ```bash
            pip install tfunify==${{ needs.prep.outputs.version }}
            ```

            ## Verified
            - Python 3.10, 3.11, 3.12
            - Unit + CLI tests passed
          draft: false
          prerelease: false

