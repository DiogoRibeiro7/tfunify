name: Release

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main  # Only run releases from main branch

jobs:
  # Verify we're on main branch
  verify-branch:
    name: Verify release is from main branch
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to check branch
          
      - name: Verify tag is on main branch
        run: |
          # Get the commit hash of the tag
          TAG_COMMIT=$(git rev-list -n 1 $GITHUB_REF)
          echo "Tag commit: $TAG_COMMIT"
          
          # Check if this commit is on main branch
          if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            echo "✅ Tag is on main branch"
          else
            echo "❌ Error: Tag is not on main branch"
            echo "Please merge to main before creating release tags"
            exit 1
          fi
          
          # Also verify the tag points to the latest commit on main
          MAIN_COMMIT=$(git rev-parse origin/main)
          echo "Main commit: $MAIN_COMMIT"
          
          if [ "$TAG_COMMIT" = "$MAIN_COMMIT" ]; then
            echo "✅ Tag points to latest main commit"
          else
            echo "⚠️  Warning: Tag does not point to latest main commit"
            echo "Tag commit: $TAG_COMMIT"
            echo "Main commit: $MAIN_COMMIT"
            echo "Consider creating tag from latest main"
          fi

  test:
    name: Run tests before release
    runs-on: ubuntu-latest
    needs: verify-branch
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"
          
      - name: Install dependencies
        run: |
          poetry env use ${{ matrix.python-version }}
          poetry install --with dev
          
      - name: Run linting
        run: |
          poetry run ruff check .
          poetry run ruff format --check .
          
      - name: Run type checking
        run: poetry run mypy tfunify
        
      - name: Run unit tests
        run: |
          poetry run pytest --cov=tfunify --cov-report=term-missing --cov-fail-under=80

  test-cli:
    name: Test CLI functionality before release
    runs-on: ubuntu-latest
    needs: verify-branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"
          
      - name: Install dependencies
        run: |
          poetry install
          
      - name: Test CLI functionality
        run: |
          # Create test data
          python -c "
          import numpy as np
          import csv
          np.random.seed(42)
          n = 200
          prices = 100 + np.cumsum(0.01 * np.random.randn(n))
          with open('test_data.csv', 'w', newline='') as f:
              writer = csv.writer(f)
              writer.writerow(['date', 'close'])
              for i, p in enumerate(prices):
                  writer.writerow([f'2023-{(i%12)+1:02d}-{(i%28)+1:02d}', f'{p:.2f}'])
          "
          
          # Test all CLI commands
          poetry run tfu european --csv test_data.csv --span-long 50 --span-short 10
          poetry run tfu american --csv test_data.csv --span-long 50 --span-short 10 --atr-period 20
          poetry run tfu tsmom --csv test_data.csv --L 5 --M 8
          
          # Verify output files exist and are valid
          python -c "
          import numpy as np
          for system in ['european', 'american', 'tsmom']:
              data = np.load(f'{system}_results.npz')
              print(f'{system}: {list(data.keys())}')
              assert len(data.files) > 0, f'No data in {system}_results.npz'
          print('All CLI tests passed!')
          "

  build-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    needs: [verify-branch, test, test-cli]  # Wait for branch verification and all tests to pass
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"
          
      - name: Verify version tag
        run: |
          # Extract version from tag
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Tag version: $TAG_VERSION"
          
          # Extract version from pyproject.toml
          PYPROJECT_VERSION=$(poetry version --short)
          echo "Pyproject version: $PYPROJECT_VERSION"
          
          # Verify they match
          if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) doesn't match pyproject.toml version ($PYPROJECT_VERSION)"
            exit 1
          fi
          echo "Version verification passed!"
          
      - name: Build package
        run: |
          poetry install --no-root
          poetry build
          
      - name: Verify build
        run: |
          # Check that wheel and sdist were created
          ls -la dist/
          
          # Verify wheel contents
          python -c "
          import zipfile
          import os
          
          wheel_files = [f for f in os.listdir('dist') if f.endswith('.whl')]
          if not wheel_files:
              raise Exception('No wheel file found')
              
          with zipfile.ZipFile(f'dist/{wheel_files[0]}', 'r') as z:
              files = z.namelist()
              print('Wheel contents:')
              for f in sorted(files):
                  print(f'  {f}')
              
              # Check essential files are present
              tfunify_files = [f for f in files if 'tfunify' in f and f.endswith('.py')]
              if not tfunify_files:
                  raise Exception('No tfunify Python files found in wheel')
              print(f'Found {len(tfunify_files)} tfunify Python files')
          "
          
      - name: Test installation from wheel
        run: |
          # Create a temporary virtual environment
          python -m venv test_env
          source test_env/bin/activate
          
          # Install from wheel
          pip install dist/*.whl
          
          # Test basic import
          python -c "
          import tfunify
          print(f'Successfully imported tfunify version {tfunify.__version__}')
          
          # Test basic functionality
          import numpy as np
          from tfunify.european import EuropeanTF, EuropeanTFConfig
          
          np.random.seed(42)
          prices = 100 * np.cumprod(1 + 0.01 * np.random.randn(100))
          cfg = EuropeanTFConfig(span_long=20, span_short=5)
          system = EuropeanTF(cfg)
          pnl, _, _, _ = system.run_from_prices(prices)
          print(f'Test run successful, PnL shape: {pnl.shape}')
          "
          
          deactivate
          
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish --username __token__ --password $POETRY_PYPI_TOKEN_PYPI
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this release
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ```bash
            pip install tfunify==${{ github.ref_name }}
            ```
            
            ## Verification
            
            This release has been tested with:
            - Python 3.10, 3.11, 3.12
            - All unit tests passing
            - CLI functionality verified
            - Cross-platform compatibility confirmed
          draft: false
          prerelease: false
